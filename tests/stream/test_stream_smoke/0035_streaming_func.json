{
    "test_suite_name": "streaming_func",
    "tag": "smoke",
    "test_suite_config":{
        "setup": {
        "statements": [
            ]
        },
        "tests_2_run": {"ids_2_run": ["all"], "tags_2_run":[], "tags_2_skip":{"default":["todo", "to_support", "change", "bug", "sample"],"cluster": ["view", "cluster_table_bug"]}}
    },
    "comments": "Tests covering query state checkpointing smoke test cases",
    "tests": [
        {
            "id": 1,
            "tags": ["query_state"],
            "name": "global_aggr_with_fun_avg_time_weighted",
            "description": "global aggregation with function avg_time_weighted state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists test35_state_stream1"},
                        {"client":"python", "query_type": "table", "exist":"test35_state_stream1", "exist_wait":2, "wait":1, "query":"create stream test35_state_stream1 (val int32, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"3600", "depends_on_stream":"test35_state_stream1", "wait":1, "terminate":"manual", "query":"subscribe to select avg_time_weighted(val, timestamp) from test35_state_stream1 emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"3600",  "kill":"3600", "kill_wait":5, "wait":3, "query": "insert into test35_state_stream1(val, timestamp) values (1, '2020-02-02 20:00:00'), (2, '2020-02-02 20:00:01'), (3, '2020-02-02 20:00:03'), (3, '2020-02-02 20:00:04'), (3, '2020-02-02 20:00:05')"},
                        {"client":"python", "query_type": "table", "depends_on":"3600",  "kill":"3600", "kill_wait":5, "wait":3, "query": "insert into test35_state_stream1(val, timestamp) values (6, '2020-02-02 20:00:10')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '3600'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"3600",
                    "expected_results":[
                        ["2.2"]
                    ]
                }
            ]
        },
        {
            "id": 2,
            "tags": ["query_state"],
            "name": "global_aggr_with_fun_median_time_weighted",
            "description": "global aggregation with function median_time_weighted state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists test35_state_stream1"},
                        {"client":"python", "query_type": "table", "exist":"test35_state_stream1", "exist_wait":2, "wait":1, "query":"create stream test35_state_stream1 (val int32, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"3602", "depends_on_stream":"test35_state_stream1", "wait":1, "terminate":"manual", "query":"subscribe to select median_time_weighted(val, timestamp) from test35_state_stream1 emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"3602",  "kill":"3602", "kill_wait":5, "wait":3, "query": "insert into test35_state_stream1(val, timestamp) values (1, '2020-02-02 20:00:00'), (2, '2020-02-02 20:00:01'), (3, '2020-02-02 20:00:03'), (3, '2020-02-02 20:00:04'), (3, '2020-02-02 20:00:05')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '3602'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"3602",
                    "expected_results":[
                        ["2"]
                    ]
                }
            ]
        },
        {
            "id": 3,
            "tags": ["hopping window"],
            "name": "stream hopping window avg_time_weighted(value) aggregate group by id, window_start, window_end, with emit_version()",
            "description": "tumble window aggregate by avg_time_weighted and group by id, window_start, window_end",
            "steps": [
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists test35_state_stream1"},
                        {"client":"python", "query_type": "table", "exist":"test35_state_stream1", "exist_wait":2, "wait":1, "query":"create stream test35_state_stream1 (id string, value float64, timestamp datetime)"},
                        {"client":"python","query_id":"3603", "query_type": "stream","depends_on_stream":"test35_state_stream1", "terminate":"manual","query":"subscribe to select avg_time_weighted(value, timestamp, window_end) from hop(test35_state_stream1, timestamp, interval 3 second, interval 5 second) group by id, window_start, window_end emit stream settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"3603",  "wait":1, "query": "insert into test35_state_stream1(id, value, timestamp) values ('dev1', 10.0, '2020-02-02 20:00:00')"},
                        {"client":"python", "query_type": "table", "depends_on":"3603",  "wait":1, "query": "insert into test35_state_stream1(id, value, timestamp) values ('dev1', 10.5, '2020-02-02 20:00:01')"},
                        {"client":"python", "query_type": "table", "depends_on":"3603",  "wait":1, "query": "insert into test35_state_stream1(id, value, timestamp) values ('dev1', 12.0, '2020-02-02 20:00:02')"},
                        {"client":"python", "query_type": "table", "depends_on":"3603",  "wait":1, "query": "insert into test35_state_stream1(id, value, timestamp) values ('dev1', 15.2, '2020-02-02 20:00:03')"},
                        {"client":"python", "query_type": "table", "depends_on":"3603",  "wait":1, "query": "insert into test35_state_stream1(id, value, timestamp) values ('dev1', 18.3, '2020-02-02 20:00:04')"},
                        {"client":"python", "query_type": "table", "depends_on":"3603",  "wait":1, "query": "insert into test35_state_stream1(id, value, timestamp) values ('dev1', 21.0, '2020-02-02 20:00:05')"},
                        {"client":"python", "query_type": "table", "depends_on":"3603",  "wait":1, "query": "insert into test35_state_stream1(id, value, timestamp) values ('dev1', 28.0, '2020-02-02 20:00:07')"},
                        {"client":"python", "query_type": "table", "depends_on":"3603",  "kill":"3603", "kill_wait":3, "wait":1, "query": "insert into test35_state_stream1(id, value, timestamp) values ('dev1', 30.0, '2020-02-02 20:00:08')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '3603'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"3603", "expected_results":[
                        ["10.25"],
                        ["13.2"],
                        ["20.7"]
                    ]
                }
            ]
        },
        {
            "id": 4,
            "tags": ["hopping window"],
            "name": "stream hopping window median_time_weighted(value) aggregate group by id, window_start, window_end, with emit_version()",
            "description": "tumble window aggregate by median_time_weighted and group by id, window_start, window_end",
            "steps": [
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists test35_state_stream1"},
                        {"client":"python", "query_type": "table", "exist":"test35_state_stream1", "exist_wait":2, "wait":1, "query":"create stream test35_state_stream1 (id string, value float64, timestamp datetime)"},
                        {"client":"python","query_id":"3604", "query_type": "stream","depends_on_stream":"test35_state_stream1", "terminate":"manual","query":"subscribe to select median_time_weighted (value, timestamp, window_end) from hop(test35_state_stream1, timestamp, interval 3 second, interval 5 second) group by id, window_start, window_end emit stream settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"3604",  "kill":"3603", "kill_wait":8, "wait":5, "query": "insert into test35_state_stream1(id, value, timestamp) values ('dev1', 10, '2020-02-02 20:00:00'), ('dev1', 10.5, '2020-02-02 20:00:01'), ('dev1', 12.0, '2020-02-02 20:00:02'), ('dev1', 18.3, '2020-02-02 20:00:04'), ('dev1', 25.5, '2020-02-02 20:00:06'), ('dev1', 28.0, '2020-02-02 20:00:07'), ('dev1', 30.0, '2020-02-02 20:00:08')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '3604'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"3604", "expected_results":[
                        ["10"],
                        ["12"],
                        ["18.3"]
                    ]
                }
            ]
        }
    ]
}
